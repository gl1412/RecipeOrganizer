{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $6FvfU = parcelRequire(\"6FvfU\");\n// Load recipes immediately on page load\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $c1ce9d969bfa6909$var$renderRecipes();\n    $c1ce9d969bfa6909$var$updateUI(false); // Load UI without blocking login\n});\n// Login Function\ndocument.getElementById(\"login-btn\").addEventListener(\"click\", async ()=>{\n    try {\n        const result = await (0, $6FvfU.signInWithPopup)((0, $6FvfU.auth), (0, $6FvfU.provider));\n        localStorage.setItem(\"email\", JSON.stringify(result.user.email));\n        console.log(\"User signed in:\", result.user.email);\n        $c1ce9d969bfa6909$var$updateUI(true);\n        $c1ce9d969bfa6909$var$renderRecipes(); // Refresh recipes to show user's saved recipes\n    } catch (error) {\n        console.error(\"Error during login:\", error);\n    }\n});\n// Logout Function\ndocument.getElementById(\"logout-btn\").addEventListener(\"click\", ()=>{\n    (0, $6FvfU.signOut)((0, $6FvfU.auth)).then(()=>{\n        localStorage.removeItem(\"email\");\n        console.log(\"User signed out\");\n        $c1ce9d969bfa6909$var$updateUI(false);\n        $c1ce9d969bfa6909$var$renderRecipes(); // Refresh recipes to show all public recipes\n    }).catch((error)=>console.error(\"Error during logout:\", error));\n});\n// Update UI Based on Login State\nfunction $c1ce9d969bfa6909$var$updateUI(isLoggedIn) {\n    document.getElementById(\"login-btn\").style.display = isLoggedIn ? \"none\" : \"inline-block\";\n    document.getElementById(\"logout-btn\").style.display = isLoggedIn ? \"inline-block\" : \"none\";\n}\n// Function to Save Recipes to Firestore (requires login)\nasync function $c1ce9d969bfa6909$var$addRecipeToFirestore(name, ingredients, category) {\n    const email = JSON.parse(localStorage.getItem(\"email\"));\n    if (!email) {\n        alert(\"You must be logged in to add recipes!\");\n        return;\n    }\n    try {\n        await (0, $6FvfU.addDoc)((0, $6FvfU.collection)((0, $6FvfU.db), \"recipes\"), {\n            email: email,\n            name: name,\n            ingredients: ingredients.split(\",\").map((i)=>i.trim()),\n            category: category\n        });\n        console.log(\"Recipe added successfully!\");\n        $c1ce9d969bfa6909$var$renderRecipes();\n    } catch (error) {\n        console.error(\"Error adding recipe:\", error);\n    }\n}\n// Function to Retrieve and Display Recipes\nasync function $c1ce9d969bfa6909$var$renderRecipes() {\n    const email = JSON.parse(localStorage.getItem(\"email\"));\n    const recipesList = document.getElementById(\"recipes\");\n    recipesList.innerHTML = \"\";\n    try {\n        let q;\n        if (email) // Show only logged-in user's recipes\n        q = (0, $6FvfU.query)((0, $6FvfU.collection)((0, $6FvfU.db), \"recipes\"), (0, $6FvfU.where)(\"email\", \"==\", email));\n        else // Show all recipes \n        q = (0, $6FvfU.collection)((0, $6FvfU.db), \"recipes\");\n        const data = await (0, $6FvfU.getDocs)(q);\n        data.forEach((docSnap)=>{\n            const recipe = docSnap.data();\n            const recipeId = docSnap.id;\n            const li = document.createElement(\"li\");\n            li.innerHTML = `<strong>${recipe.name}</strong> - ${recipe.ingredients.join(\", \")} (${recipe.category})`;\n            // Favorite Button\n            const favoriteBtn = document.createElement(\"button\");\n            favoriteBtn.textContent = \"\\u2605\";\n            favoriteBtn.addEventListener(\"click\", ()=>$c1ce9d969bfa6909$var$toggleFavorite(recipeId, recipe.name));\n            // Edit Button (only visible if logged in)\n            if (email) {\n                const editBtn = document.createElement(\"button\");\n                editBtn.textContent = \"Edit\";\n                editBtn.addEventListener(\"click\", ()=>$c1ce9d969bfa6909$var$editRecipe(recipeId, recipe.name, recipe.ingredients.join(\", \"), recipe.category));\n                li.appendChild(editBtn);\n            }\n            // Delete Button (only visible if logged in)\n            if (email) {\n                const deleteBtn = document.createElement(\"button\");\n                deleteBtn.textContent = \"Delete\";\n                deleteBtn.addEventListener(\"click\", ()=>$c1ce9d969bfa6909$var$deleteRecipe(recipeId));\n                li.appendChild(deleteBtn);\n            }\n            li.appendChild(favoriteBtn);\n            recipesList.appendChild(li);\n        });\n    } catch (error) {\n        console.error(\"Error loading recipes:\", error);\n    }\n}\n// Function to Delete a Recipe from Firestore\nasync function $c1ce9d969bfa6909$var$deleteRecipe(recipeId) {\n    if (confirm(\"Are you sure you want to delete this recipe?\")) try {\n        await (0, $6FvfU.deleteDoc)((0, $6FvfU.doc)((0, $6FvfU.db), \"recipes\", recipeId));\n        console.log(\"Recipe deleted successfully!\");\n        $c1ce9d969bfa6909$var$renderRecipes();\n    } catch (error) {\n        console.error(\"Error deleting recipe:\", error);\n    }\n}\n// Function to Edit a Recipe\nasync function $c1ce9d969bfa6909$var$editRecipe(recipeId, currentName, currentIngredients, currentCategory) {\n    const newName = prompt(\"Enter new recipe name:\", currentName);\n    const newIngredients = prompt(\"Enter new ingredients (comma-separated):\", currentIngredients);\n    const newCategory = prompt(\"Enter new category:\", currentCategory);\n    if (newName && newIngredients) try {\n        await (0, $6FvfU.updateDoc)((0, $6FvfU.doc)((0, $6FvfU.db), \"recipes\", recipeId), {\n            name: newName,\n            ingredients: newIngredients.split(\",\").map((i)=>i.trim()),\n            category: newCategory\n        });\n        console.log(\"Recipe updated successfully!\");\n        $c1ce9d969bfa6909$var$renderRecipes();\n    } catch (error) {\n        console.error(\"Error updating recipe:\", error);\n    }\n    else alert(\"Recipe name and ingredients cannot be empty!\");\n}\n// Function to Mark Favorite Recipes\nfunction $c1ce9d969bfa6909$var$toggleFavorite(recipeId, recipeName) {\n    let favorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n    if (favorites.includes(recipeId)) favorites = favorites.filter((id)=>id !== recipeId);\n    else favorites.push(recipeId);\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n    alert(`${recipeName} has been ${favorites.includes(recipeId) ? \"added to\" : \"removed from\"} favorites!`);\n}\n// AI Chatbot Functionality\nasync function $c1ce9d969bfa6909$var$getAIResponse(userInput) {\n    const requestBody = {\n        contents: [\n            {\n                parts: [\n                    {\n                        text: `You are an AI assistant for a Recipe Organizer app. Answer questions about its functionality and provide suggestions. Question: ${userInput}`\n                    }\n                ]\n            }\n        ]\n    };\n    try {\n        const response = await fetch(`${(0, $6FvfU.AI_API_URL)}?key=${(0, $6FvfU.AI_API_KEY)}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        const data = await response.json();\n        return data.candidates?.[0]?.content?.parts?.[0]?.text || \"Sorry, I couldn't answer that.\";\n    } catch (error) {\n        console.error(\"Error fetching AI response:\", error);\n        return \"Error fetching response.\";\n    }\n}\n// Handle User Input in Chatbot\ndocument.getElementById(\"chat-send\").addEventListener(\"click\", async ()=>{\n    const userInput = document.getElementById(\"chat-input\").value.trim();\n    if (!userInput) return;\n    const aiResponse = await $c1ce9d969bfa6909$var$getAIResponse(userInput);\n    document.getElementById(\"chat-messages\").innerHTML += `<p><strong>You:</strong> ${userInput}</p><p><strong>AI:</strong> ${aiResponse}</p>`;\n});\n// Load Recipes and UI on Page Load\ndocument.addEventListener(\"DOMContentLoaded\", $c1ce9d969bfa6909$var$renderRecipes);\n\n\n//# sourceMappingURL=index.443938a7.js.map\n","import { db, collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where } from \"./firebase.js\";\nimport { auth, provider, signInWithPopup, signOut, AI_API_KEY, AI_API_URL } from \"./firebase.js\"; \n\n// Load recipes immediately on page load\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    renderRecipes();\n    updateUI(false); // Load UI without blocking login\n});\n\n// Login Function\ndocument.getElementById(\"login-btn\").addEventListener(\"click\", async () => {\n    try {\n        const result = await signInWithPopup(auth, provider);\n        localStorage.setItem(\"email\", JSON.stringify(result.user.email));\n        console.log(\"User signed in:\", result.user.email);\n        updateUI(true);\n        renderRecipes(); // Refresh recipes to show user's saved recipes\n    } catch (error) {\n        console.error(\"Error during login:\", error);\n    }\n});\n\n// Logout Function\ndocument.getElementById(\"logout-btn\").addEventListener(\"click\", () => {\n    signOut(auth).then(() => {\n        localStorage.removeItem(\"email\");\n        console.log(\"User signed out\");\n        updateUI(false);\n        renderRecipes(); // Refresh recipes to show all public recipes\n    }).catch(error => console.error(\"Error during logout:\", error));\n});\n\n// Update UI Based on Login State\nfunction updateUI(isLoggedIn) {\n    document.getElementById(\"login-btn\").style.display = isLoggedIn ? \"none\" : \"inline-block\";\n    document.getElementById(\"logout-btn\").style.display = isLoggedIn ? \"inline-block\" : \"none\";\n}\n\n// Function to Save Recipes to Firestore (requires login)\nasync function addRecipeToFirestore(name, ingredients, category) {\n    const email = JSON.parse(localStorage.getItem(\"email\"));\n    if (!email) {\n        alert(\"You must be logged in to add recipes!\");\n        return;\n    }\n\n    try {\n        await addDoc(collection(db, \"recipes\"), {\n            email: email,\n            name: name,\n            ingredients: ingredients.split(\",\").map(i => i.trim()),\n            category: category\n        });\n\n        console.log(\"Recipe added successfully!\");\n        renderRecipes();\n    } catch (error) {\n        console.error(\"Error adding recipe:\", error);\n    }\n}\n\n// Function to Retrieve and Display Recipes\nasync function renderRecipes() {\n    const email = JSON.parse(localStorage.getItem(\"email\"));\n    const recipesList = document.getElementById(\"recipes\");\n    recipesList.innerHTML = \"\";\n\n    try {\n        let q;\n        if (email) {\n            // Show only logged-in user's recipes\n            q = query(collection(db, \"recipes\"), where(\"email\", \"==\", email));\n        } else {\n            // Show all recipes \n            q = collection(db, \"recipes\");\n        }\n\n        const data = await getDocs(q);\n\n        data.forEach((docSnap) => {\n            const recipe = docSnap.data();\n            const recipeId = docSnap.id;\n\n            const li = document.createElement(\"li\");\n            li.innerHTML = `<strong>${recipe.name}</strong> - ${recipe.ingredients.join(\", \")} (${recipe.category})`;\n\n            // Favorite Button\n            const favoriteBtn = document.createElement(\"button\");\n            favoriteBtn.textContent = \"★\";\n            favoriteBtn.addEventListener(\"click\", () => toggleFavorite(recipeId, recipe.name));\n\n            // Edit Button (only visible if logged in)\n            if (email) {\n                const editBtn = document.createElement(\"button\");\n                editBtn.textContent = \"Edit\";\n                editBtn.addEventListener(\"click\", () => editRecipe(recipeId, recipe.name, recipe.ingredients.join(\", \"), recipe.category));\n                li.appendChild(editBtn);\n            }\n\n            // Delete Button (only visible if logged in)\n            if (email) {\n                const deleteBtn = document.createElement(\"button\");\n                deleteBtn.textContent = \"Delete\";\n                deleteBtn.addEventListener(\"click\", () => deleteRecipe(recipeId));\n                li.appendChild(deleteBtn);\n            }\n\n            li.appendChild(favoriteBtn);\n            recipesList.appendChild(li);\n        });\n\n    } catch (error) {\n        console.error(\"Error loading recipes:\", error);\n    }\n}\n\n// Function to Delete a Recipe from Firestore\nasync function deleteRecipe(recipeId) {\n    if (confirm(\"Are you sure you want to delete this recipe?\")) {\n        try {\n            await deleteDoc(doc(db, \"recipes\", recipeId));\n            console.log(\"Recipe deleted successfully!\");\n            renderRecipes();\n        } catch (error) {\n            console.error(\"Error deleting recipe:\", error);\n        }\n    }\n}\n\n// Function to Edit a Recipe\nasync function editRecipe(recipeId, currentName, currentIngredients, currentCategory) {\n    const newName = prompt(\"Enter new recipe name:\", currentName);\n    const newIngredients = prompt(\"Enter new ingredients (comma-separated):\", currentIngredients);\n    const newCategory = prompt(\"Enter new category:\", currentCategory);\n\n    if (newName && newIngredients) {\n        try {\n            await updateDoc(doc(db, \"recipes\", recipeId), {\n                name: newName,\n                ingredients: newIngredients.split(\",\").map(i => i.trim()),\n                category: newCategory\n            });\n            console.log(\"Recipe updated successfully!\");\n            renderRecipes();\n        } catch (error) {\n            console.error(\"Error updating recipe:\", error);\n        }\n    } else {\n        alert(\"Recipe name and ingredients cannot be empty!\");\n    }\n}\n\n// Function to Mark Favorite Recipes\nfunction toggleFavorite(recipeId, recipeName) {\n    let favorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n    if (favorites.includes(recipeId)) {\n        favorites = favorites.filter(id => id !== recipeId);\n    } else {\n        favorites.push(recipeId);\n    }\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n    alert(`${recipeName} has been ${favorites.includes(recipeId) ? \"added to\" : \"removed from\"} favorites!`);\n}\n\n// AI Chatbot Functionality\nasync function getAIResponse(userInput) {\n    const requestBody = {\n        contents: [{ parts: [{ text: `You are an AI assistant for a Recipe Organizer app. Answer questions about its functionality and provide suggestions. Question: ${userInput}` }] }]\n    };\n\n    try {\n        const response = await fetch(`${AI_API_URL}?key=${AI_API_KEY}`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(requestBody)\n        });\n\n        const data = await response.json();\n        return data.candidates?.[0]?.content?.parts?.[0]?.text || \"Sorry, I couldn't answer that.\";\n    } catch (error) {\n        console.error(\"Error fetching AI response:\", error);\n        return \"Error fetching response.\";\n    }\n}\n\n// Handle User Input in Chatbot\ndocument.getElementById(\"chat-send\").addEventListener(\"click\", async () => {\n    const userInput = document.getElementById(\"chat-input\").value.trim();\n    if (!userInput) return;\n\n    const aiResponse = await getAIResponse(userInput);\n    document.getElementById(\"chat-messages\").innerHTML += `<p><strong>You:</strong> ${userInput}</p><p><strong>AI:</strong> ${aiResponse}</p>`;\n});\n\n// Load Recipes and UI on Page Load\ndocument.addEventListener(\"DOMContentLoaded\", renderRecipes);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$6FvfU","$c1ce9d969bfa6909$var$updateUI","isLoggedIn","document","getElementById","style","display","$c1ce9d969bfa6909$var$renderRecipes","email","JSON","parse","localStorage","getItem","recipesList","innerHTML","q","query","collection","db","where","data","getDocs","forEach","docSnap","recipe","recipeId","li","createElement","name","ingredients","join","category","favoriteBtn","textContent","addEventListener","recipeName","favorites","includes","filter","push","setItem","stringify","alert","editBtn","$c1ce9d969bfa6909$var$editRecipe","appendChild","deleteBtn","$c1ce9d969bfa6909$var$deleteRecipe","error","console","confirm","deleteDoc","doc","log","currentName","currentIngredients","currentCategory","newName","prompt","newIngredients","newCategory","updateDoc","split","map","i","trim","$c1ce9d969bfa6909$var$getAIResponse","userInput","requestBody","contents","parts","text","response","fetch","AI_API_URL","AI_API_KEY","method","headers","body","json","candidates","content","result","signInWithPopup","auth","provider","user","signOut","then","removeItem","catch","value","aiResponse"],"version":3,"file":"index.443938a7.js.map"}